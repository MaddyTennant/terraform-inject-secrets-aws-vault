provider "aws" {
  alias      = "ap_southeast_2"
  region     = "ap-southeast-2"
  access_key = data.vault_aws_access_credentials.creds.access_key
  secret_key = data.vault_aws_access_credentials.creds.secret_key
}

provider "aws" {
  alias      = "us_west_2"
  region     = "us-west-2"
  access_key = data.vault_aws_access_credentials.creds.access_key
  secret_key = data.vault_aws_access_credentials.creds.secret_key
}

provider "vault" {}

# the terraform_remote_state.admin data block retrieves the Terraform state file generated from your Vault Admin workspace
# We recommend using provider-specific data sources when convenient. terraform_remote_state is more flexible, but requires access to the whole Terraform state.
data "terraform_remote_state" "admin" {
  backend = "s3"

  config = {
    bucket         = "my-terraform-state-bucket-maddyt"
    key            = "vault-admin-workspace/terraform.tfstate"
    region         = "us-west-2"
    dynamodb_table = "my-terraform-lock-table"
    encrypt        = true
  }
}

# the vault_aws_access_credentials.creds data block retrieves the dynamic, 
# short-lived AWS credentials from your Vault instance. Notice that this uses the Vault Admin workspace's 
# output variables: backend and role
# the aws provider is initialized with the short-lived credentials retrieved by vault_aws_access_credentials.creds
data "vault_aws_access_credentials" "creds" {
  backend = data.terraform_remote_state.admin.outputs.backend # dynamic-aws-creds-vault-path
  role    = data.terraform_remote_state.admin.outputs.role    # dynamic-aws-creds-vault-role
}

# This IAM user was generated by Vault with the appropriate IAM policy configured by the Vault Admin workspace. 
# Because the default_lease_ttl_seconds is set to 120 seconds, Vault will revoke those IAM credentials and they 
# will be removed from the AWS IAM console after 120 seconds.


data "aws_ami" "ubuntu" {
  most_recent = true

  filter {
    name   = "name"
    values = ["ubuntu/images/hvm-ssd/ubuntu-bionic-18.04-amd64-server-*"]
  }

  filter {
    name   = "virtualization-type"
    values = ["hvm"]
  }

  owners = ["099720109477"] # Canonical
}

resource "aws_iam_policy" "S3DynamoDBAccessPolicy" {
  name        = "S3DynamoDBAccessPolicy"
  description = "Policy to allow S3 and DynamoDB access for Terraform state management"
  policy      = jsonencode({
    Version = "2012-10-17",
    Statement = [
        {
            "Effect": "Allow",
            "Action": [
                "s3:*",
                "s3-object-lambda:*",
                "dynamodb:*"
            ],
            "Resource": "*"
        }
    ]
  })
}

resource "aws_iam_role" "s3_full_role" {
  name = "s3_full_role"

  assume_role_policy = jsonencode({
    Version = "2012-10-17",
    Statement = [
      {
        Effect = "Allow",
        Principal = {
          Service = "ec2.amazonaws.com"
        },
        Action = "sts:AssumeRole"
      }
    ]
  })
}

resource "aws_iam_role_policy_attachment" "attach_s3_policy_to_role" {
  role       = aws_iam_role.s3_full_role.name
  policy_arn = aws_iam_policy.S3DynamoDBAccessPolicy.arn
}

resource "aws_instance" "main" {
  ami           = data.aws_ami.ubuntu.id
  instance_type = "t2.micro"

  tags = {
    Name  = "${var.project_name}-instance"
    TTL   = var.ttl
    Owner = "${var.project_name}-guide"
  }
}

# resource "aws_s3_bucket" "terraform_state" {
#   provider = aws.us_west_2
#   bucket = "my-terraform-state-bucket-maddyt"
#   tags = {
#     Name        = "my-terraform-state-bucket-maddyt"
#     Environment = "Dev"
#   }
# }

# resource "aws_s3_bucket_acl" "terraform_state_acl" {
#   provider = aws.us_west_2
#   bucket = aws_s3_bucket.terraform_state.id
#   bucket = "my-terraform-state-bucket-maddyt"
#   acl    = "private"
# }

resource "aws_dynamodb_table" "basic_dynamodb_table" {
  name         = "my-terraform-lock-table"
  billing_mode = "PROVISIONED"

  hash_key       = "LockID"
  read_capacity  = 5
  write_capacity = 5

  attribute {
    name = "LockID"
    type = "S"
  }

  tags = {
    Name = "my-terraform-lock-table"
  }
}
